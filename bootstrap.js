(()=>{function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return}if(info.done){resolve(value);}else {Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,'next',value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,'throw',err);}_next(undefined);})}}_asyncToGenerator(function*(){try{var{externalStorageDirectory,download}=nativeModuleProxy.AliucordNative;var bundlePath=externalStorageDirectory+'/AliucordRN/Aliucord.js.bundle';if(!AliuFS.exists(bundlePath)){try{yield download('https://raw.githubusercontent.com/Aliucord/AliucordRN/builds/Aliucord.js.bundle',bundlePath);}catch(error){alert('Failed to download Aliucord.js.bundle');throw error}}(globalThis._globals\?\?={}).aliucord=AliuHermes.run(bundlePath);}catch(error){alert('Something went wrong :(\\nCheck logs');console.error(error.stack);}})();})();